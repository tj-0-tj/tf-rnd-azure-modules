name: 'Terraform'
on:
  workflow_dispatch:
    inputs:
      TFAction:
        description: "Terraform Action - Plan, Apply or Destroy"     
        required: true
        default: "plan"
permissions:
  contents: read
env:
    ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
    ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
    ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
    ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
    AZDO_ORG_SERVICE_URL: ${{ secrets.AZDO_ORG_SERVICE_URL }}
    AZDO_PERSONAL_ACCESS_TOKEN: ${{ secrets.AZDO_PERSONAL_ACCESS_TOKEN }}
    RESOURCE_GROUP_LOCATION: "uksouth"
    TerraformBackendStorageAccount: "mystgacount"
    TerraformBackendResourceGroup: "myrg"
    TerraformBackendStorageContainer: "state"
    TF_VAR_appId: ${{ secrets.APP_ID }}
    TF_VAR_password: ${{ secrets.APP_PWD }}
jobs:
  azure_setup:
    name: 'Azure Setup'
    runs-on: ubuntu-latest
    environment: dev
    steps:
    - uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
    
    - name: Create resource group
      uses: Azure/CLI@v1
      with:
        inlineScript: |
          #!/bin/bash
          if $(az group exists --name ${{ env.TerraformBackendResourceGroup }}) ; then
            echo "Azure resource group already exists, skipping creation..."
          else
            az group create --name ${{ env.TerraformBackendResourceGroup }} --location ${{ env.RESOURCE_GROUP_LOCATION }}
            echo "Azure resource group created"
          fi 

          if $(az storage account check-name --name ${{ env.TerraformBackendStorageAccount }}) ; then
            echo "Azure storage account already exists, skipping creation..."
          else
            az storage account create --name ${{ env.TerraformBackendStorageAccount }} --location ${{ env.RESOURCE_GROUP_LOCATION }} -g ${{ env.TerraformBackendResourceGroup }}
            echo "Azure storage account created"
            ACCOUNT_KEY=$(az storage account keys list --resource-group $TerraformBackendResourceGroup --account-name $TerraformBackendStorageAccount --query [0].value -o tsv)
            export ACCOUNT_KEY=$ACCOUNT_KEY
            echo "name=ACCOUNT_KEY::${ACCOUNT_KEY}" >> $GITHUB_OUTPUT
          fi 

          if $(az storage container exists --name ${{ env.TerraformBackendStorageContainer }}) ; then
            echo "Azure storage container already exists, skipping creation..."
          else
            # Create blob container
            az storage container create --name $TerraformBackendStorageContainer --account-name $TerraformBackendStorageAccount --account-key $ACCOUNT_KEY
            echo "storage_account_name: $TerraformBackendStorageAccount"
            echo "container_name: $TerraformBackendStorageContainer"
            echo "access_key: $ACCOUNT_KEY"
          fi
    - uses: azure/CLI@v1
      with:
        inlineScript: |
          az logout
          az cache purge
          az account clear

  terraform:
    needs: azure_setup
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev   
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.2
      - name: Terraform Init
        run: |
            terraform init -input=false \
              -backend-config="storage_account_name=$TerraformBackendStorageAccount" \
              -backend-config="container_name=$TerraformBackendStorageContainer" \
              -backend-config="key=dev.tfstate" \
              -backend-config="resource_group_name=$TerraformBackendResourceGroup" \
              -backend-config="subscription_id=$ARM_SUBSCRIPTION_ID" \
              -backend-config="tenant_id=$ARM_TENANT_ID" \
              -backend-config="client_id=$ARM_CLIENT_ID" \
              -backend-config="client_secret=$ARM_CLIENT_SECRET"

      - name: Terraform Plan
        run: terraform plan -out=plan.tfplan -input=false
      - uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: plan.tfplan
          if-no-files-found: error
          retention-days: 5
      - name: Terraform Apply
        if: ${{ inputs.TFAction == 'apply'}}  
        run: terraform apply -input=false -auto-approve plan.tfplan
      - name: Terraform Destroy
        if: ${{ inputs.TFAction == 'destroy' }} 
        run: terraform destroy -input=false -auto-approve